AWSTemplateFormatVersion: "2010-09-09"
Description: AutoScaling Demo cfn template
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
  # MyIP:
  #   Description: IP address allowed to access EC2
  #   Type: String

Resources:
  # VPC作成
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: sticky-sessoin-vpc

  # インターネットゲートウェイ作成
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sticky-sessoin-igw

  # IGWをVPCにアタッチ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      # 作成する予定のVpcIdを取得したい場合は、`VpcId: !Ref VPC`と記述する
      # 組み込み関数Refについて: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  # publicサブネットの作成
  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: auto-scaling-demo-pubsub1
  PubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1d
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: auto-scaling-demo-pubsub2

  # Route tableの作成
  PubSubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: auto-scaling-demo-pubsub-rt

  # PubSub-インターネット間のルーティング
  PubSubToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubSubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # ルートテーブルをサブネットに関連付け
  AssoPubSubRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub1
      RouteTableId: !Ref PubSubRT
  AssoPubSubRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub2
      RouteTableId: !Ref PubSubRT
  
  # EC2作成
  WebServer1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub1
          GroupSet:
            - !Ref EC2SG
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Sticky session from <u style='color:red;'> Hello from EC2: Web Server1 </u></h1>" > /var/www/html/index.html
      Tags:
          - Key: Name
            Value: auto-scaling-demo-ec2-web-server1
  WebServer2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub2
          GroupSet:
            - !Ref EC2SG
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Sticky session from <u style='color:green;'> Hello from EC2 2: Web Server2 </u></h1>" > /var/www/html/index.html
      Tags:
          - Key: Name
            Value: auto-scaling-demo-ec2-web-server2
  VideoServer1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub1
          GroupSet:
            - !Ref EC2SG
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          sudo mkdir vid
          cd /var/www/html/vid
          echo "<h1>Sticky session from <u style='color:blue;'> Hello from EC2: Video Server1 </u></h1>" > /var/www/html/vid/index.html
      Tags:
          - Key: Name
            Value: auto-scaling-demo-ec2-video-server1
  VideoServer2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub2
          GroupSet:
            - !Ref EC2SG
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          sudo mkdir vid
          cd /var/www/html/vid
          echo "<h1>Sticky session from <u style='color:orange;'> Hello from EC2: Video Server2 </u></h1>" > /var/www/html/vid/index.html
      Tags:
          - Key: Name
            Value: auto-scaling-demo-ec2-video-server2

  # sercurity group 作成
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: auto-scaling-demo-pubsub-ec2-ec2-sg
      GroupDescription: Allow SSH and HTTP access only MyIP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: auto-scaling-demo-pubsub-sg
      GroupDescription: Allow SSH and HTTP access only MyIP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  # target group 作成
  WebTargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VPC
      Name: "auto-scaling-demo-WebServer-tg"
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher: 
        HttpCode: 200
      Tags: 
        - Key: Name
          Value: !Sub "auto-scaling-demo-tg"
      TargetGroupAttributes: 
        - Key: "deregistration_delay.timeout_seconds"
          Value: 300
        - Key: "stickiness.enabled"
          Value: false
        - Key: "stickiness.type"
          Value: lb_cookie
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: 86400
      Targets: 
        - Id: !Ref WebServer1
          Port: 80
        - Id: !Ref WebServer2
          Port: 80
  VideoTargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VPC
      Name: "auto-scaling-demo-VidServer-tg"
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher: 
        HttpCode: 200
      Tags: 
        - Key: Name
          Value: !Sub "auto-scaling-demo-video-server-tg"
      TargetGroupAttributes: 
        - Key: "deregistration_delay.timeout_seconds"
          Value: 300
        - Key: "stickiness.enabled"
          Value: false
        - Key: "stickiness.type"
          Value: lb_cookie
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: 86400
      Targets: 
        - Id: !Ref VideoServer1
          Port: 80
        - Id: !Ref VideoServer2
          Port: 80

  ALB: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Name: "auto-scaling-demo-pubsub-alb"
      Tags: 
        - Key: Name
          Value: "auto-scaling-demo-pubsub-alb"
      Scheme: "internet-facing"
      LoadBalancerAttributes: 
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 60
      SecurityGroups:
        - !Ref AlbSG
      Subnets: 
        - !Ref PubSub1
        - !Ref PubSub2

  ListenerRuleP1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              - '*'
      

  ListenerRuleP2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref VideoTargetGroup
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              - '/vid/*'

  ALBListener: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref VideoTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP